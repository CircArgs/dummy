from typing import Any, Type, Union, Optional, get_origin, get_args
from pydantic import BaseModel, create_model, Field, ValidationError

class UnsupportedModelError(Exception):
    """Raised when the schema contains an unsupported field type."""
    pass

def serde_model(model_cls: Type[BaseModel]) -> dict[str, Any]:
    """
    Convert a Pydantic model class into a *dictionary* that represents
    its JSON schema (no JSON serialization).
    """
    return model_cls.model_json_schema()

def deserde_model(schema_dict: dict[str, Any]) -> Type[BaseModel]:
    """
    Convert a schema dictionary (similar to what Pydantic's model_json_schema produces)
    back into a new dynamic Pydantic model class, preserving field descriptions.
    """
    # Basic keys from the schema
    properties = schema_dict.get("properties", {})
    required_fields = set(schema_dict.get("required", []))
    model_name = schema_dict.get("title", "DynamicModel")

    # Accept "null" as type(None), plus the usual built-ins
    type_map = {
        "string": str,
        "integer": int,
        "number": float,
        "boolean": bool,
        "array": list,
        "object": dict,
        "null": type(None),
    }

    def parse_union(schemas: list[dict[str, Any]]) -> tuple[Any, dict[str, Any]]:
        """
        Parse a list of possible sub-schemas from 'anyOf' or 'oneOf',
        producing a Union[...] Python type, plus additional metadata if needed.
        """
        union_types = []
        extras_merged = {}
        for s in schemas:
            py_type, extras = parse_field(s)
            union_types.append(py_type)
            # Potentially merge or ignore extras from each sub-schema
            # (for simplicity, we just take the extras from the first sub-schema,
            # but you could do more elaborate merging if needed)
            extras_merged.update({k: v for k, v in extras.items() if v is not None})
        return Union[tuple(union_types)], extras_merged

    def parse_field(field_schema: dict[str, Any]) -> tuple[Any, dict[str, Any]]:
        """
        Return (python_type, extras) for a single field schema.
        `extras` may contain 'description', 'default', etc.
        """
        # Grab meta fields like 'description', 'default'
        description = field_schema.get("description")
        default = field_schema.get("default")

        # Handle 'anyOf', 'oneOf' for unions
        if "anyOf" in field_schema:
            return parse_union(field_schema["anyOf"])
        if "oneOf" in field_schema:
            return parse_union(field_schema["oneOf"])

        # Detect the field type
        field_type = field_schema.get("type", "string")  # fallback to "string"

        if field_type == "array":
            # Recursively parse array items
            items_schema = field_schema.get("items", {})
            item_py_type, item_extras = parse_field(items_schema)
            py_type = list[item_py_type]
            # Merge extras with the item-level metadata if you want; for simplicity, we ignore that.
            return py_type, {"description": description, "default": default}

        elif field_type == "object":
            # Either nested model or dict with additionalProperties
            if "properties" in field_schema:
                # Nested model
                py_type = deserde_model(field_schema)
            elif "additionalProperties" in field_schema:
                val_schema = field_schema["additionalProperties"]
                val_py_type, _ = parse_field(val_schema)
                py_type = dict[str, val_py_type]
            else:
                # Generic dict
                py_type = dict[str, Any]

            return py_type, {"description": description, "default": default}

        else:
            if field_type not in type_map:
                raise UnsupportedModelError(
                    f"Unsupported field type '{field_type}' in schema_dict."
                )
            py_type = type_map[field_type]
            return py_type, {"description": description, "default": default}

    # Construct fields for create_model
    fields = {}
    for field_name, field_schema in properties.items():
        py_type, extras = parse_field(field_schema)
        # If it's in required_fields => no default => Field(...)
        if field_name in required_fields:
            fields[field_name] = (py_type, Field(..., description=extras["description"]))
        else:
            # Optional field => Union[None, py_type]
            optional_py_type = py_type if py_type is type(None) else Union[py_type, None]
            fields[field_name] = (
                optional_py_type,
                Field(
                    default=extras["default"],
                    description=extras["description"],
                ),
            )

    # Create the dynamic model
    DynamicModel = create_model(
        model_name,
        **fields,
        # Forbid extra fields
        model_config={"extra": "forbid"},
    )

    # Convert ValidationError -> ValueError
    original_init = DynamicModel.__init__
    def new_init(self, *args, **kwargs):
        try:
            original_init(self, *args, **kwargs)
        except ValidationError as e:
            raise ValueError(str(e)) from e

    DynamicModel.__init__ = new_init
    return DynamicModel
