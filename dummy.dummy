import pytest
import respx
from httpx import Response
from toolhub_client.client import ToolHubClient, Tool

TOOLHUB_SERVER_URL = "http://test.toolhub.com"

@pytest.fixture
def client():
    """Fixture to initialize the ToolHubClient."""
    return ToolHubClient(toolhub_server_uri=TOOLHUB_SERVER_URL)

@pytest.mark.asyncio
async def test_list_tools(client):
    """Test the list_tools method."""
    namespace = "test_namespace"
    tools_mock = ["tool1", "tool2"]

    with respx.mock(base_url=TOOLHUB_SERVER_URL) as respx_mock:
        route = respx_mock.get(f"/list_tools/{namespace}").mock(
            return_value=Response(200, json=tools_mock)
        )
        result = await client.list_tools(namespace)

        assert route.called
        assert result == tools_mock

@pytest.mark.asyncio
async def test_get_schema(client):
    """Test the get_schema method."""
    tool_name = "test_tool"
    namespace = "test_namespace"
    schema_mock = {"name": tool_name, "description": "A test tool"}

    with respx.mock(base_url=TOOLHUB_SERVER_URL) as respx_mock:
        route = respx_mock.get(f"/tool/{namespace}/{tool_name}").mock(
            return_value=Response(200, json=schema_mock)
        )
        result = await client.get_schema(tool_name, namespace)

        assert route.called
        assert result == schema_mock

@pytest.mark.asyncio
async def test_invoke(client):
    """Test the invoke method."""
    tool_name = "test_tool"
    namespace = "test_namespace"
    arguments = {"param1": "value1"}
    response_mock = {"result": "success"}

    with respx.mock(base_url=TOOLHUB_SERVER_URL) as respx_mock:
        route = respx_mock.post(f"/use_tool/{namespace}/{tool_name}").mock(
            return_value=Response(200, json=response_mock)
        )
        result = await client.invoke(tool_name, arguments, {}, namespace)

        assert route.called
        assert result == response_mock

@pytest.mark.asyncio
async def test_get_tool(client):
    """Test the get_tool method."""
    tool_name = "test_tool"
    namespace = "test_namespace"
    schema_mock = {"name": tool_name, "description": "A test tool"}

    with respx.mock(base_url=TOOLHUB_SERVER_URL) as respx_mock:
        route = respx_mock.get(f"/tool/{namespace}/{tool_name}").mock(
            return_value=Response(200, json=schema_mock)
        )
        tool = await client.get_tool(tool_name, namespace)

        assert route.called
        assert isinstance(tool, Tool)
        assert tool.name == tool_name
        assert tool.description == schema_mock["description"]

@pytest.mark.asyncio
async def test_call(client):
    """Test the call method for invoking a tool."""
    tool_name = "test_tool"
    namespace = "test_namespace"
    arguments = {"param1": "value1"}
    response_mock = {"result": "called successfully"}
    schema_mock = {"name": tool_name, "description": "A test tool"}

    with respx.mock(base_url=TOOLHUB_SERVER_URL) as respx_mock:
        # Mock get_schema request
        respx_mock.get(f"/tool/{namespace}/{tool_name}").mock(
            return_value=Response(200, json=schema_mock)
        )
        # Mock invoke request
        respx_mock.post(f"/use_tool/{namespace}/{tool_name}").mock(
            return_value=Response(200, json=response_mock)
        )

        tool = await client.get_tool(tool_name, namespace)
        result = await tool(arguments)

        assert result == response_mock
