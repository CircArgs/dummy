import os
import socket
import threading
import paramiko
from paramiko import SFTPServerInterface, SFTPServer, SFTPAttributes, SFTPHandle

# --- Configuration ---
HOST = "0.0.0.0"           # Listen on all interfaces
PORT = 2222               # Port for SFTP server
USERNAME = "testuser"      # SFTP Username
PASSWORD = "testpass"      # SFTP Password
ROOT_DIR = "./sftp_root"   # Directory for SFTP file operations


# Ensure the root directory exists
os.makedirs(ROOT_DIR, exist_ok=True)

# --- SFTP Server Components ---
class SimpleSFTPServerInterface(SFTPServerInterface):
    """ Custom SFTP server interface for paramiko """

    def __init__(self, server, *args, **kwargs):
        super().__init__(server, *args, **kwargs)
        self.root_dir = os.path.abspath(ROOT_DIR)

    def _resolve_path(self, path):
        """ Resolve path safely within the root directory """
        normalized_path = os.path.normpath(os.path.join(self.root_dir, path.lstrip('/')))
        if not normalized_path.startswith(self.root_dir):
            raise IOError("Invalid Path")
        return normalized_path

    def list_folder(self, path):
        path = self._resolve_path(path)
        files = os.listdir(path)
        attrs = []
        for f in files:
            attr = SFTPAttributes()
            stat = os.stat(os.path.join(path, f))
            attr.filename = f
            attr.st_size = stat.st_size
            attr.st_mode = stat.st_mode
            attr.st_mtime = stat.st_mtime
            attrs.append(attr)
        return attrs

    def open(self, path, flags, attr):
        path = self._resolve_path(path)
        try:
            f = open(path, 'r+b') if os.path.exists(path) else open(path, 'wb+')
        except IOError:
            raise IOError("Unable to open file")
        return SFTPHandle(f)

    def mkdir(self, path, attr):
        os.makedirs(self._resolve_path(path), exist_ok=True)

    def remove(self, path):
        os.remove(self._resolve_path(path))

    def rename(self, oldpath, newpath):
        os.rename(self._resolve_path(oldpath), self._resolve_path(newpath))

    def rmdir(self, path):
        os.rmdir(self._resolve_path(path))


# --- Server Setup ---
class SimpleSFTPServer:
    """ Paramiko-based SFTP Server """

    def __init__(self, host, port, username, password):
        self.host = host
        self.port = port
        self.username = username
        self.password = password
        self.server = None
        self.transport = None

    def start_server(self):
        """ Start the SFTP server """
        print(f"Starting SFTP server on {self.host}:{self.port}")
        # Create an SSH key for the server
        host_key = paramiko.RSAKey.generate(2048)
        self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.server.bind((self.host, self.port))
        self.server.listen(100)

        while True:
            client, addr = self.server.accept()
            print(f"Connection from {addr}")
            self.handle_client(client, host_key)

    def handle_client(self, client, host_key):
        transport = paramiko.Transport(client)
        transport.add_server_key(host_key)
        sftp_server = paramiko.ServerInterface()

        # Custom authentication
        class SimpleAuth(paramiko.ServerInterface):
            def __init__(self, username, password):
                self.username = username
                self.password = password
        
            def check_auth_password(self, username, password):
                if username == self.username and password == self.password:
                    return paramiko.AUTH_SUCCESSFUL
                return paramiko.AUTH_FAILED
        
            def get_allowed_auths(self, username):
                return "password"
        
            def check_channel_request(self, kind, chanid):
                if kind == "session":
                    return paramiko.OPEN_SUCCEEDED
                return paramiko.OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED
        
            def check_channel_subsystem_request(self, channel, name):
                if name == "sftp":
                    return True
                return False


        server = SimpleAuth()
        transport.start_server(server=server)
        channel = transport.accept(20)
        if channel is None:
            raise Exception("No channel")

        sftp = paramiko.SFTPServer(channel, SimpleSFTPServerInterface)
        try:
            sftp.serve_forever()
        except Exception as e:
            print(f"Client disconnected: {e}")


# --- Main Entry ---
if __name__ == "__main__":
    server = SimpleSFTPServer(HOST, PORT, USERNAME, PASSWORD)
    try:
        server.start_server()
    except KeyboardInterrupt:
        print("Shutting down the server...")
