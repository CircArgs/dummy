import os
from fastapi import FastAPI, HTTPException
from kubernetes import client, config

app = FastAPI(title="Dev Pod Creation API", version="1.0")

# Load kubeconfig or in-cluster config
try:
    config.load_incluster_config()  # Use when running inside the cluster
except config.ConfigException:
    config.load_kube_config()  # Use for local testing

# Kubernetes API client
k8s_client = client.CoreV1Api()

# Environment variables
NAMESPACE = os.getenv("NAMESPACE", "default")
DEPLOYMENT = os.getenv("DEPLOYMENT", "default-deployment")
CRONJOB = os.getenv("CRONJOB", "default-cronjob")
IMAGE = os.getenv("IMAGE", "your-workflow-image:latest")  # Image for workflow container
SFTP_IMAGE = os.getenv("SFTP_IMAGE", "your-sftp-image:latest")

@app.post("/create-pod/{name}", summary="Create a new development pod")
async def create_pod(name: str):
    """
    Endpoint to create a Kubernetes pod with an emptyDir volume.
    Path Parameter:
        - name: Name of the new pod
    """
    pod_name = name

    # Pod specification
    pod_manifest = client.V1Pod(
        metadata=client.V1ObjectMeta(name=pod_name, labels={"app": "tenant-dev-pod"}),
        spec=client.V1PodSpec(
            containers=[
                client.V1Container(
                    name="workflow-container",
                    image=IMAGE,
                    volume_mounts=[
                        client.V1VolumeMount(mount_path="/workspace", name="workspace")
                    ]
                ),
                client.V1Container(
                    name="sftp-sidecar",
                    image=SFTP_IMAGE,
                    ports=[client.V1ContainerPort(container_port=22)],
                    volume_mounts=[
                        client.V1VolumeMount(mount_path="/workspace", name="workspace")
                    ]
                )
            ],
            volumes=[
                client.V1Volume(
                    name="workspace",
                    empty_dir=client.V1EmptyDirVolumeSource()
                )
            ],
            restart_policy="Never"
        )
    )

    # Create the pod
    try:
        k8s_client.create_namespaced_pod(namespace=NAMESPACE, body=pod_manifest)
        return {
            "status": "Pod created successfully",
            "pod_name": pod_name,
            "namespace": NAMESPACE,
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/health", summary="Healthcheck endpoint")
async def health_check():
    """
    Healthcheck endpoint to verify the service is running.
    """
    return {"status": "OK", "message": "Service is healthy"}


@app.get("/", summary="Root endpoint")
async def root():
    return {"message": "Dev Pod Creation API is running"}

====


apiVersion: batch/v1
kind: CronJob
metadata:
  name: dev-pod-cleanup
  namespace: kube-system  # Global resource can run in kube-system or another central namespace
spec:
  schedule: "0 0 * * *"  # Run every day at midnight
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: cleanup-serviceaccount  # ServiceAccount with required permissions
          containers:
          - name: pod-cleanup
            image: bitnami/kubectl:latest  # Minimal image with curl and kubectl support
            command:
            - /bin/sh
            - -c
            - |
              echo "Starting cleanup of developer pods older than 5 days..."
              
              # Calculate the threshold date (5 days ago)
              THRESHOLD_DATE=$(date -d "5 days ago" --utc +%Y-%m-%dT%H:%M:%SZ)

              # List all pods labeled as developer pods and check their creation timestamps
              kubectl get pods --all-namespaces -l app=tenant-dev-pod -o json | jq -r '
                .items[] | select(.metadata.creationTimestamp < "'$THRESHOLD_DATE'") |
                [.metadata.namespace, .metadata.name] | @tsv
              ' | while read namespace name; do
                  echo "Deleting pod $name in namespace $namespace"
                  kubectl delete pod $name -n $namespace
              done
              
              echo "Cleanup complete."

          restartPolicy: OnFailure
