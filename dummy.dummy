import os
import paramiko
import socket
import threading

# SSH Server Host Keys (Generate keys using `ssh-keygen -t rsa` if needed)
HOST_KEY = paramiko.RSAKey.generate(2048)  # For demonstration; save this key securely in production

# Directory to serve for SFTP operations
BASE_DIR = os.path.expanduser("~/sshfs_root")

# Ensure the directory exists
os.makedirs(BASE_DIR, exist_ok=True)

# SSH Server Configuration
HOST = "0.0.0.0"
PORT = 2222  # Default port for testing (change if needed)

# Custom SFTP Server Handler
class SFTPServer(paramiko.SFTPServerInterface):
    def __init__(self, server, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.server = server

    def open(self, path, flags, attr):
        real_path = os.path.join(BASE_DIR, path.strip("/"))
        return open(real_path, flags)

    def list_folder(self, path):
        real_path = os.path.join(BASE_DIR, path.strip("/"))
        return [paramiko.SFTPAttributes.from_stat(os.stat(os.path.join(real_path, f))) for f in os.listdir(real_path)]

# SSH Server Class
class SSHServer(paramiko.ServerInterface):
    def __init__(self):
        self.event = threading.Event()

    def check_auth_none(self, username):
        return paramiko.AUTH_SUCCESSFUL

    def get_allowed_auths(self, username):
        return "none"

    def check_channel_request(self, kind, chanid):
        if kind == "session":
            return paramiko.OPEN_SUCCEEDED
        return paramiko.OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED

    def check_channel_subsystem_request(self, channel, name):
        if name == "sftp":
            self.sftp_server = paramiko.SFTPServer(channel, SFTPServer, BASE_DIR)
            return True
        return False

# Server Function
def start_server():
    print(f"Starting SSH Server on {HOST}:{PORT}")
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server_socket.bind((HOST, PORT))
    server_socket.listen(100)

    while True:
        client, addr = server_socket.accept()
        print(f"Connection from {addr}")
        try:
            transport = paramiko.Transport(client)
            transport.add_server_key(HOST_KEY)
            ssh_server = SSHServer()
            transport.start_server(server=ssh_server)

            channel = transport.accept(20)
            if channel is None:
                continue
            print("SSH Connection Established")

            ssh_server.event.wait(10)
            if not ssh_server.event.is_set():
                raise Exception("Channel timeout")
        except Exception as e:
            print(f"Error: {e}")
        finally:
            client.close()

# Main Entry Point
if __name__ == "__main__":
    try:
        start_server()
    except KeyboardInterrupt:
        print("Stopping SSH Server")
