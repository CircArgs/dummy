import os
import socket
import paramiko
import threading

HOST = '0.0.0.0'
PORT = 2222
USERNAME = 'testuser'
PASSWORD = 'testpass'

# Define a handler for SFTP connections
class SFTPServer(paramiko.ServerInterface):
    def __init__(self):
        self.event = threading.Event()

    def check_auth_password(self, username, password):
        if username == USERNAME and password == PASSWORD:
            return paramiko.AUTH_SUCCESSFUL
        return paramiko.AUTH_FAILED

    def check_channel_request(self, kind, chanid):
        if kind == 'session':
            return paramiko.OPEN_SUCCEEDED
        return paramiko.OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED

    def get_allowed_auths(self, username):
        return 'password'

def start_sftp_server():
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    sock.bind((HOST, PORT))
    sock.listen(5)
    print(f"SFTP server listening on {HOST}:{PORT}")

    while True:
        client, addr = sock.accept()
        print(f"Connection from {addr}")
        transport = paramiko.Transport(client)
        transport.load_server_moduli()
        transport.add_server_key(paramiko.RSAKey.generate(2048))
        server = SFTPServer()
        transport.start_server(server=server)

        chan = transport.accept()
        if chan is None:
            continue

        sftp = paramiko.SFTPServer(transport, chan)
        sftp.set_subsystem_handler('sftp', paramiko.SFTPServerInterface)

if __name__ == '__main__':
    start_sftp_server()
