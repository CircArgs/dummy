import socket
import threading
import paramiko
import logging

logging.basicConfig(level=logging.INFO)

# Generate a host key in memory for demonstration
# For production, you should generate and store a persistent host key
host_key = paramiko.RSAKey.generate(2048)

class SFTPServerInterface(paramiko.SFTPServerInterface):
    # This class can be expanded to interact with real filesystem or a virtual one.
    def __init__(self, server, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.home_dir = '/tmp'  # Example home directory

    def list_folder(self, path):
        # List files in the specified folder.
        # Here we return an empty list as an example.
        return []

    def stat(self, path):
        # Implement proper stat if you want real file interaction.
        # Raise an IOError if the file does not exist.
        raise IOError("File not found")

    # Implement other SFTPServerInterface methods as needed for functionality.

class Server(paramiko.ServerInterface):
    def __init__(self):
        self.event = threading.Event()

    def check_auth_password(self, username, password):
        # Simple authentication for demonstration:
        # username: testuser, password: password
        if username == "testuser" and password == "password":
            return paramiko.AUTH_SUCCESSFUL
        return paramiko.AUTH_FAILED

    def check_channel_request(self, kind, chanid):
        if kind == 'session':
            return paramiko.OPEN_SUCCEEDED
        return paramiko.OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED


if __name__ == '__main__':
    port = 2222
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    sock.bind(('0.0.0.0', port))
    sock.listen(100)
    logging.info(f"Listening on 0.0.0.0:{port}")

    while True:
        client, addr = sock.accept()
        logging.info(f"Connection from {addr}")
        t = paramiko.Transport(client)
        t.add_server_key(host_key)
        server = Server()

        try:
            t.start_server(server=server)
        except paramiko.SSHException:
            logging.error("SSH negotiation failed.")
            continue

        chan = t.accept(20)
        if chan is None:
            logging.error("No channel.")
            t.close()
            continue

        sftp_server = paramiko.SFTPServer(t, SFTPServerInterface)
        sftp_server.serve_forever()
